Hosting

Parse Hosting provides you with the tools to host static and dynamic websites. You can upload arbitraty static web content or create dynamic web apps, using the JavaScript SDK on the client side and Cloud Code plus Express on the server side. This allows you to create companion web apps for your native app, landing pages for your mobile app, or even host Unity Web Player binaries.

Getting Started

On the computer you use for development, you will need to install Parse's command line tool. This will let you manage your website in the Parse Cloud. You will need at least version 1.1.0 of the command line tool.

Installing or Updating the Command Line Tool (Mac/Linux)

In Mac OS and Linux/Unix environments, you can get the parse tool by running this command:

curl -s https://www.parse.com/downloads/cloud_code/installer.sh | sudo /bin/bash
This installs a tool named "parse" to /usr/local/bin/parse. There's no other junk, so to uninstall, just delete that file. This will also update your command line tool if you already have it installed.

Installing the Command Line Tool (Windows)

The Parse command line tool for Windows is available here. After downloading the zip file and unzipping it, you can launch a parse-aware powershell session by double clicking ParseConsole.exe. After the first run of the ParseConsole, you can also start the powershell session by hitting Win + R and typing "parse".

Creating Your Project Directory

The next step is to create a directory to store the website that you will run in the cloud. The command parse new sets up this directory, and will prompt you to pick which app you are creating Hosting for:

$ parse new MyWebsite
Email: ninja@gmail.com
Password:
1:MyApp
Select an App: 1
$ cd MyWebsite
Use the email address and password for your Parse account to log in. If you signed up via OAuth and never set a password, you should now set one by editing your account settings. This will create a directory called MyWebsite in the current directory. Several files are automatically created for you:

-config/
  global.json
-cloud/
  main.js
-public/
  index.html
The config directory contains a JSON configuration file that you shouldn't normally need to deal with, the cloud directory contains dynamic website code, and the public directory stores any static content that you want to host on Parse. For now, just check that these files were created successfully. If you're using source control, you can check all of these files in.

A Simple Website

Hosting static content using Parse is easy. Everything in the public directory will be hosted at your-custom-subdomain.parseapp.com. This directory sits alongside the cloud and config directories.

To deploy a Hello World website, simply do:

$ echo "Hello World" > public/index.html
$ parse deploy
To access the website you've deployed you need to set up a subdomain.

Choosing a Subdomain Name

To access your hosted content, you will first need to select a ParseApp subdomain. You can set your subdomain in the "Web Hosting" section of your app's settings. There will be a field for you to enter a ParseApp name. The subdomain name is case-insensitive, and unlike your app name, it must be unique across the entire Parse system. It may consist of 3 to 20 alphanumeric characters and dashes, and may not start or end with a dash. When you select a unique subdomain name, a checkmark is displayed to indicate that is is not yet taken.

Let's say you chose at-the-movies as the subdomain name for your website, you can now access it at the root URL at-the-movies.parseapp.com. If you upload another hosted file from public/images/background.png, then it can be accessed by pointing your browser at at-the-movies.parseapp.com/images/background.png.

Uploading Constraints

There are a few constraints for hosted files:

Files are limited to 500 megabytes.
You cannot upload more than 500 hosted files.
Filenames should begin with an alphanumeric character and consist only of alphanumeric characters, dashes, underscores, spaces, and '@' signs.
The command line tool will automatically skip emacs and vim autosave files.
You are free to upload hosted content of any type you want. Parse will infer the content type from each file's extension.

Custom Domain Names

Users can also host content at a custom domain name. If you have chosen the ParseApp name at-the-movies and want to host your content at www.example.com, it requires three steps:

Demonstrate that you control the DNS entries for www.example.com. You can do this by adding a CNAME to at-the-movies.parseapp.com from either www.example.com or [your_host_name_key].www.example.com. Your host name key is a 12-character string that you can find in the "Web Hosting" section in your app's settings. It can take anywhere from 15 minutes to several hours for a new DNS entry to be propagated, and the next step cannot be completed until this happens. If you are currently hosting a website at www.example.com, you will probably want to use the host name key method, otherwise your website might experience downtime for users who see the new DNS entry before you complete the next step.
After your new DNS entry been propagated, you can set your host name to www.example.com in your app's hosting settings. If the first step was successful, a checkmark should show up. Otherwise, an error message will tell you what went wrong.
If you verified ownership via the host name key, you will still need to add a CNAME from www.example.com to at-the-movies.parseapp.com to begin sending traffic to your hosted app.
After completing these steps, www.example.com will serve the same content as at-the-movies.parseapp.com.

If you want to serve content at an apex domain like example.com then you might have trouble with the steps above, because root domains generally don't support CNAME records. To support this situation, Parse offers a service which will redirect traffic from root domains like example.com to the www.example.com subdomain. To use this service, complete the steps above using a www-prefixed domain like www.example.com, and then create A records from example.com to one or both of the following IP addresses:

54.85.233.145
54.85.226.190
A records can be created in the settings page of your domain name service provider. After creating these A records, requests to example.com will result in a 301 (permanent) redirect to www.example.com while preserving the request path.

If you visit your hosted site over HTTPS using your custom domain, you might see a warning that the website is serving content using an SSL certificate belonging to *.parseapp.com. If you have a SSL certificate belonging to your custom domain, you can fix these warnings by uploading the public certificate file and the private key file on the "Web Hosting" section in your app's settings. If your domain's public certificate requires intermediate certificates, then you should append your public certificate, intermediate certificates, and the root certificate into a single file (in that order), and upload it as the "SSL Public Certificate" in your app settings. In 10-30 minutes, your certificate will be propagated to the Parse hosting servers and served to users who visit your hosted site over HTTPS.

Dynamic Websites

You can use Cloud Code and Express to build multi-page dynamic web apps. With the Express framework, you have many powerful tools at your fingertips, such as request routing, cookie handling, and template rendering. With Cloud Code, you have access to functionality such as interacting with Parse data and sending HTTP requests.

With Parse, you have a choice of building either a multi-page web app with Express, or a single-page Backbone app with the Parse JavaScript SDK on the client side. The Express approach has the advantage that your website can be crawled by search engines, while the client-side Backbone approach may result in more responsive apps. You can find details about Express and Cloud Code in our Express API docs.

Express can help you get your app up and running quickly, but if you prefer a lower-level Node.js-like HTTP interface, we have that too. For more details, please see our HTTP interface API docs. If you choose to use Express or Node.js, you'll first need to delete public/index.html so that requests can get through to your custom handler functions.

In this guide, we'll focus on building web apps with the Express API.

Getting Started

After you get Parse Hosting set up, you can generate a starter web app by typing the following inside your parse project folder.

$ parse generate express
This command creates the following directory structure inside your cloud folder. It will not touch your existing main.js file.

-cloud/
  app.js
  -views/
    hello.ejs
  main.js (not touched)
Next, you need to add the following line at the top of your main.js. This makes sure that the code in app.js is loaded.

require('cloud/app.js');
Then, run parse deploy to deploy your web app. After deploying, you should find your web app at your-custom-subdomain.parseapp.com/hello. We'll next go over this sample app in detail.

Sample Web App

Let's go over the starter web app to get an idea what Express can do for us. If you haven't created the starter app yet, you can create one using these instructions.

The top-level entry point for an Express app is app.js, where the app is initialized, and the request paths are hooked up to corresponding logic through the Express routing API. You must require this file from main.js because Cloud Code starts at main.js when it loads your JavaScript. We recommend that you put your Cloud Functions in main.js, and put all Express-related code in app.js.

In your sample app, app.js should look like this:

// These two lines are required to initialize Express.
var express = require('express');
var app = express();
 
// Global app configuration section
app.set('views', 'cloud/views');  // Specify the folder to find templates
app.set('view engine', 'ejs');    // Set the template engine
app.use(express.bodyParser());    // Middleware for reading request body
 
// This is an example of hooking up a request handler with a specific request
// path and HTTP verb using the Express routing API.
app.get('/hello', function(req, res) {
  res.render('hello', { message: 'Congrats, you just set up your app!' });
});
 
// This line is required to make Express respond to http requests.
app.listen();
In the global app configuration section at the top, we specify some app settings and initialize the Express middleware. App settings include specifying a templating engine for rendering your web pages, and where to find your template source files. Express middleware are optional components that preprocess the incoming request. The middleware specified in this section apply to all request paths.

The sample app also has a cloud/views folder, containing an EJS template file (hello.ejs). In this template, the message variable will be replaced by the value specified in the res.render() line in app.js.

Handling Requests

Let's look at a simple request handler that reads the request text, and responds with a message including the request text.

app.post('/echo', function(req, res) {
  res.set('Content-Type', 'text/plain');
  res.send('echoing: ' + req.body.message);
});
Every request handler starts with app.VERB, where the VERB could be any of the standard HTTP verbs, such as get, post, put, or delete. This tells Express what type of HTTP request this handler should respond to.

Next, the '/echo' parameter specifies what url path (also known as route) that this request handler should respond to. Then, we specify a function that takes in a request and response object to perform the request handling logic. As long as we include the express.bodyParser middleware, the req.body should be populated with input data. For example, if the raw request body is { "message": "hi" }, then req.body.message above will have the value 'hi'. Finally, the res.send() tells Express to populate the response object with the specified string.

Express Middleware

Middleware are modules that process the request before it reaches your request handler. These components convert a raw HTTP request into a request object that you can easily work with in your request handler. Cloud Code supports the following Express-provided middleware:

express.basicAuth() - Allows you to set up HTTP basic authentication for your website.
express.bodyParser() - Converts the HTTP request body (JSON or www-form-encoded) into the request.body object.
express.methodOverride() - A standard web form only supports HTTP post. This middleware lets the web form issue put/delete HTTP requests to Express. This is especially useful when you want to closely follow REST-ful principles.
express.cookieParser() - Reads the request cookie sent by the browser, and puts that into the request.cookies and express.request.signedCookies objects.
express.cookieSession() - Allows you to store session data in a signed cookie by setting the request.session object
express.csrf() - Protects against cross-site request forgery.
In addition, we've provided the following custom middleware:

parseExpressRawBody() - Allows you to access the raw request body as a Buffer object at req.body. This is useful if you want to directly access bytes in the request, or if you want to read the request body as other data formats (e.g. XML) using your own parser in the request handler.
You can add middleware to your app with app.use(). The standard Express middleware are functions, so make sure you call them accordingly (e.g. app.use(express.csrf()). You should add your app's middleware before registering any request handlers with app.VERB().

Please follow the above order when configuring Express middleware in the global app configuration section. You may leave out any middleware that you don't need. The order is important because later middleware may depend on the data created by earlier ones.

Rendering Templates

Templates are a great way to dynamically generate web content, and reduce code duplication. Cloud Code provides modules for the EJS and Jade template engines.

You specify the template engine in the global app configuration section with app.set('view engine', ENGINE_NAME), where ENGINE_NAME can be either 'ejs' or 'jade'. The template file in the cloud/views folder should have an extension matching ENGINE_NAME. The sample app's template looks like this in EJS (hello.ejs) or Jade (hello.jade):

<!DOCTYPE html>
<html>
  <head>
    <title>Sample App</title>
  </head>
  <body>
    <h1>Hello World</h1>
    <p><%= message %></p>
  </body>
</html>
Show examples for:  
You can find more information about the syntax for each template engine at the homepages for EJS and Jade.

You render templates by calling res.render(). The first argument is the template file name. If it does not have a file extension, Express will look for the file with the extension matching your app's template engine setting. The second argument is a JSON object that contains all the variables in the template and their corresponding values. Each variable in the template serves as a placeholder, and is replaced by its actual value when you render the template.

Getting User Input

Getting user input is easy with Express in Cloud Code. You can create a form element in a template to allow the user to type some text, and then add a request handler for the request issued by submitting the form.

Let's add a simple form to our sample app template. Please replace hello.ejs or hello.jade with the following code:

<!DOCTYPE html>
<html>
  <head>
    <title>Sample App</title>
  </head>
  <body>
    <h1>Hello World</h1>
    <p><%= message %></p>
    <form method="post" action="/hello">
      <p>
        <input name="message"></input>
        <input class="button" type="submit" value="Update Greeting">
      </p>
    </form>
  </body>
</html>
Show examples for:  
Then, we need to add a request handler for the HTTP post request in app.js.

app.post('/hello', function(req, res) {
  res.render('hello', { message: req.body.message });
});
Suppose the user types "hi" into the text box, and then clicks the "Update Greeting" button. The form will send an HTTP post request to the url http://example.parseapp.com/hello, with the request body message=hi. The express.bodyParser middleware will read the request body and set req.body.message to 'hi'. The request then triggers the above request handler because the HTTP verb and url path both match. Finally, the request handler renders the hello.ejs template by inserting 'hi' into the placeholder for the message variable.

User Session Management

You can add Parse.User authentication and session management to your Express app using the parseExpressCookieSession middleware. You just need to call Parse.User.logIn() in Cloud Code, and this middleware will automatically manage the user session for you.

You can use a web form to ask for the user's login credentials, and log in the user in Cloud Code when you receive data from this form. After you call Parse.User.logIn(), this middleware will automatically set a cookie in the user's browser. During subsequent HTTP requests from the same browser, this middleware will use this cookie to automatically set the current user in Cloud Code. This will make ACLs work properly in Cloud Code, and allow you to retrieve the entire current user object if needed. Finally, when you log out a user in Cloud Code by calling Parse.User.logOut(), this middleware will automatically remove the browser cookie. For sample app code, please see the documentation for this middleware.

When you work with user data, you should use HTTPS whenever possible. To protect your app and your users, the parseExpressCookieSession middleware requires you to use HTTPS. For your convenience, we also provide a parseExpressHttpsRedirect middleware for redirecting all HTTP requests to HTTPS. Please see its documentation for details.

Static Content

Your Express app can sit side-by-side with any static content you deployed from your public folder. When a request goes to a URL of your subdomain, Parse will first look for a matching file in the public directory. If there is no match, then Parse will invoke any Express request handlers that you have registered in Cloud Code. If there is still no match, Parse will render a "404 Not Found" page. 

If you are using Express with static content, we recommend the following directory structure for your project.

-cloud/
  main.js            Cloud Code functions, require cloud/app.js here
  app.js             Express app configuration and request handling logic
  -views/            View template files that Express needs to render
    hello.ejs
-public/
  example.html       Static HTML files
  favicon.ico        Your favicon logo
  -stylesheets/      CSS stylesheets
    style.css
Logging

If you want to log a message to the log files displayed by parse log, you can use console.log, console.error, or console.warn. Both console.error and console.warn will write to the error log.

app.post('/hello', function(req, res) {
  console.log("New message: " + req.body.message);
  res.render('hello', { message: req.body.message });
});
Development vs Production

You can use your development app to try out new code, and the production app to run your app that you distribute to the public.

Adding a New App to a Project

You will need to have multiple apps linked to your project. parse new will link the first app to the project. You can add more apps by running parse add [alias], like so:

$ parse add production
Email: pirate@gmail.com
Password:
1:PiecesOfEightCounterProd
2:PiecesOfEightCounterDev
Select an App: 1
The example above links the PiecesOfEightCounterProd app to your project. It also creates an alias to new app called production that provides a shorthand way to reference the app.

Developing your Website

While developing new code, you can use the develop command to have the Parse command line tool continuously check for updates to your project and upload your changes. The command looks like:

$ parse develop development
E2013-11-21T01:05:56.257Z] Deploy failed with error:Error: Uncaught SyntaxError: Unexpected token ; in app.js:30
    at main.js:1:1
I2013-11-21T01:06:21.504Z] Deployed v172 with triggers:
  Cloud Functions:
    hello
Note that for the develop command you need to be explicit about the app that you are going to push new changes to. This avoids accidentally running develop on your production app, potentially deploying untested code to it. The command line tool will upload code changes and display new log messages, until you hit Ctrl-C.

Deploying Code to Production

After you are done testing and updating your code, you can deploy the code to production by passing the production app to the the deploy command, like so:

$ parse deploy production
New release is named v2
Command Line Tool

We've already seen how Parse's command line tool lets you deploy new code to the cloud. It has several other useful bits of functionality. For installation instructions, read Installing the Tool

Introduction

The same code can be deployed to multiple different applications. This is useful so that you can have separate "development" and "production" applications. Then you test the code on a development application before launching it in production.

The first application that is added (by the new command) will be the default application for all command line operations. All commands except for new take an optional application that the command will be performed on.

Deploying

To deploy a new release, run

$ parse deploy
New release is named v1
This pushes the new code (in cloud/main.js) to the Parse Cloud and deploys this code for the default target which is the first app that was added or the one you set using parse default. You can choose to deploy to a different target by adding the target as an argument to deploy like so:

$ parse deploy "My Other App"
New release is named v2
You can add release notes to the deploy with the -d or --description= option

When embedding parse deploy within other scripts (such as in an automated testing/deploy environment) you can rely on the exit code from the Parse command line tool to indicate whether the command succeded. It will have an exit code of 0 on success and a non-zero exit code when the deploy failed.

Developing

You can also run the Parse command line tool in development mode using the develop command. This will make the tool watch the source directory for any updates and deploy them to Parse, as well as providing a live stream of the logs.

$ parse develop development
E2013-11-21T01:05:56.257Z] Deploy failed with error:Error: Uncaught SyntaxError: Unexpected token ; in app.js:30
    at main.js:1:1
I2013-11-21T01:06:21.504Z] Deployed v172 with triggers:
  Cloud Functions:
    hello
Unlike the other commands, for develop you must specify the Parse App to push updates to. This is to avoid accidentally running develop on your production app causing you to run untested code in your production app.

Adding a New Target

You can add a new parse application as a target by running the add command. This prompts you for your Parse.com email and password and provides you a list of applications to choose from:

$ parse add
Email: pirate@gmail.com
Password:
1:PiecesOfEightCounter
2:BootyDivider
Select an App: 1
The add command takes an optional argument which is an alias to assign to the application that can be used instead of the app name.

Typically, all of this configuration data gets stored in the global.json. However, you might have an app that you use for development that you do not want to share with the rest of your team. You can use the --local flag to add this configuration instead to a separate local.json file. This way, you can check global.json into source control, while keeping local.json just on your own machine.

Setting the Default App

parse deploy, parse log, parse rollback, and parse releases use the default app to be run against the commands. parse default allows you to change this default app.

$ parse default MyApp
Default app set to MyApp.
$ parse default
Current default app is MyApp
Rolling Back

You can roll back a release using parse rollback. Just like with parse deploy, you can specify an optional target argument.

$ parse rollback
Rolled back to v1
This rollback to the previous version of the code. You can also specify the release name to rollback to by using the -r or --release= option.

Reading the Logs

Every deploy, rollback, and activation of code is logged. You can retrieve the end of logs using the parse log command. There are two types of logs:

INFO - contains everything.
ERROR - contains only the errors.
The log command takes an optional target as well as two options:

-n - The number of log lines to display (defaults to 10)
--level/-l - The log level to use (defaults to INFO)
-f - Emulates tail -f
$ parse log -n 1
E2013-11-21T01:05:56.257Z] Deploy failed with error:Error: Uncaught SyntaxError: Unexpected token ; in app.js:30
    at main.js:1:1
Listing Releases

You can list the known set of releases on the Parse Cloud with the releases command. Parse only tracks the last 10 releases.

Setting the SDK version

The default Parse JavaScript SDK version that is used for the Cloud Code in this directory is the latest version at the time the new command was run for this directory. If you want to change this use parse jssdk. You can see all available Parse JavaScript SDKs using parse jssdk -a. You can also use parse jssdk to check which Parse JavaScript SDK version is currently being used.

$ parse jssdk
Current JavaScript SDK version is 1.2.13
$ parse jssdk -a
  1.2.18
  1.2.17
  1.2.16
  1.2.15
  1.2.14
* 1.2.13
  1.2.12
  1.2.11
$ parse jssdk 1.2.18
Current JavaScript SDK version is 1.2.18
$ parse jssdk -a
* 1.2.18
  1.2.17
  1.2.16
  1.2.15
  1.2.14
  1.2.13
  1.2.12
  1.2.11
Updating the Command Line Tool

You can update the command line tool using parse update. It will automatically update your Parse command line tool to the latest version.

$ parse update
Fetching latest version ...
######################################################################## 100%
Installing ...
